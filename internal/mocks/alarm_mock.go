// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-user-api/internal/alarm (interfaces: Alarm)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAlarm is a mock of Alarm interface.
type MockAlarm struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmMockRecorder
}

// MockAlarmMockRecorder is the mock recorder for MockAlarm.
type MockAlarmMockRecorder struct {
	mock *MockAlarm
}

// NewMockAlarm creates a new mock instance.
func NewMockAlarm(ctrl *gomock.Controller) *MockAlarm {
	mock := &MockAlarm{ctrl: ctrl}
	mock.recorder = &MockAlarmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlarm) EXPECT() *MockAlarmMockRecorder {
	return m.recorder
}

// Alarm mocks base method.
func (m *MockAlarm) Alarm() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alarm")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Alarm indicates an expected call of Alarm.
func (mr *MockAlarmMockRecorder) Alarm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alarm", reflect.TypeOf((*MockAlarm)(nil).Alarm))
}

// Close mocks base method.
func (m *MockAlarm) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAlarmMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAlarm)(nil).Close))
}

// Init mocks base method.
func (m *MockAlarm) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockAlarmMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAlarm)(nil).Init))
}
