// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_user_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpUserApiClient is the client API for OcpUserApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpUserApiClient interface {
	ListUsersV1(ctx context.Context, in *ListUsersV1Request, opts ...grpc.CallOption) (*ListUsersV1Response, error)
	DescribeUserV1(ctx context.Context, in *DescribeUserV1Request, opts ...grpc.CallOption) (*DescribeUserV1Response, error)
	CreateUserV1(ctx context.Context, in *CreateUserV1Request, opts ...grpc.CallOption) (*CreateUserV1Response, error)
	RemoveUserV1(ctx context.Context, in *RemoveUserV1Request, opts ...grpc.CallOption) (*RemoveUserV1Response, error)
}

type ocpUserApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpUserApiClient(cc grpc.ClientConnInterface) OcpUserApiClient {
	return &ocpUserApiClient{cc}
}

func (c *ocpUserApiClient) ListUsersV1(ctx context.Context, in *ListUsersV1Request, opts ...grpc.CallOption) (*ListUsersV1Response, error) {
	out := new(ListUsersV1Response)
	err := c.cc.Invoke(ctx, "/ocp.user.api.OcpUserApi/ListUsersV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpUserApiClient) DescribeUserV1(ctx context.Context, in *DescribeUserV1Request, opts ...grpc.CallOption) (*DescribeUserV1Response, error) {
	out := new(DescribeUserV1Response)
	err := c.cc.Invoke(ctx, "/ocp.user.api.OcpUserApi/DescribeUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpUserApiClient) CreateUserV1(ctx context.Context, in *CreateUserV1Request, opts ...grpc.CallOption) (*CreateUserV1Response, error) {
	out := new(CreateUserV1Response)
	err := c.cc.Invoke(ctx, "/ocp.user.api.OcpUserApi/CreateUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpUserApiClient) RemoveUserV1(ctx context.Context, in *RemoveUserV1Request, opts ...grpc.CallOption) (*RemoveUserV1Response, error) {
	out := new(RemoveUserV1Response)
	err := c.cc.Invoke(ctx, "/ocp.user.api.OcpUserApi/RemoveUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpUserApiServer is the server API for OcpUserApi service.
// All implementations must embed UnimplementedOcpUserApiServer
// for forward compatibility
type OcpUserApiServer interface {
	ListUsersV1(context.Context, *ListUsersV1Request) (*ListUsersV1Response, error)
	DescribeUserV1(context.Context, *DescribeUserV1Request) (*DescribeUserV1Response, error)
	CreateUserV1(context.Context, *CreateUserV1Request) (*CreateUserV1Response, error)
	RemoveUserV1(context.Context, *RemoveUserV1Request) (*RemoveUserV1Response, error)
	mustEmbedUnimplementedOcpUserApiServer()
}

// UnimplementedOcpUserApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpUserApiServer struct {
}

func (UnimplementedOcpUserApiServer) ListUsersV1(context.Context, *ListUsersV1Request) (*ListUsersV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersV1 not implemented")
}
func (UnimplementedOcpUserApiServer) DescribeUserV1(context.Context, *DescribeUserV1Request) (*DescribeUserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUserV1 not implemented")
}
func (UnimplementedOcpUserApiServer) CreateUserV1(context.Context, *CreateUserV1Request) (*CreateUserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserV1 not implemented")
}
func (UnimplementedOcpUserApiServer) RemoveUserV1(context.Context, *RemoveUserV1Request) (*RemoveUserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserV1 not implemented")
}
func (UnimplementedOcpUserApiServer) mustEmbedUnimplementedOcpUserApiServer() {}

// UnsafeOcpUserApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpUserApiServer will
// result in compilation errors.
type UnsafeOcpUserApiServer interface {
	mustEmbedUnimplementedOcpUserApiServer()
}

func RegisterOcpUserApiServer(s grpc.ServiceRegistrar, srv OcpUserApiServer) {
	s.RegisterService(&OcpUserApi_ServiceDesc, srv)
}

func _OcpUserApi_ListUsersV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpUserApiServer).ListUsersV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.user.api.OcpUserApi/ListUsersV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpUserApiServer).ListUsersV1(ctx, req.(*ListUsersV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpUserApi_DescribeUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpUserApiServer).DescribeUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.user.api.OcpUserApi/DescribeUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpUserApiServer).DescribeUserV1(ctx, req.(*DescribeUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpUserApi_CreateUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpUserApiServer).CreateUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.user.api.OcpUserApi/CreateUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpUserApiServer).CreateUserV1(ctx, req.(*CreateUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpUserApi_RemoveUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpUserApiServer).RemoveUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.user.api.OcpUserApi/RemoveUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpUserApiServer).RemoveUserV1(ctx, req.(*RemoveUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpUserApi_ServiceDesc is the grpc.ServiceDesc for OcpUserApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpUserApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.user.api.OcpUserApi",
	HandlerType: (*OcpUserApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsersV1",
			Handler:    _OcpUserApi_ListUsersV1_Handler,
		},
		{
			MethodName: "DescribeUserV1",
			Handler:    _OcpUserApi_DescribeUserV1_Handler,
		},
		{
			MethodName: "CreateUserV1",
			Handler:    _OcpUserApi_CreateUserV1_Handler,
		},
		{
			MethodName: "RemoveUserV1",
			Handler:    _OcpUserApi_RemoveUserV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-user-api/ocp-user-api.proto",
}
