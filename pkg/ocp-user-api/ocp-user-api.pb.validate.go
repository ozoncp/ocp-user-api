// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-user-api/ocp-user-api.proto

package ocp_user_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListUsersV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUsersV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListUsersV1RequestValidationError is the validation error returned by
// ListUsersV1Request.Validate if the designated constraints aren't met.
type ListUsersV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersV1RequestValidationError) ErrorName() string {
	return "ListUsersV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersV1RequestValidationError{}

// Validate checks the field values on ListUsersV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUsersV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersV1ResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextOffset

	return nil
}

// ListUsersV1ResponseValidationError is the validation error returned by
// ListUsersV1Response.Validate if the designated constraints aren't met.
type ListUsersV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersV1ResponseValidationError) ErrorName() string {
	return "ListUsersV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersV1ResponseValidationError{}

// Validate checks the field values on CreateUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CalendarId

	// no validation rules for ResumeId

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserV1RequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserV1RequestValidationError is the validation error returned by
// CreateUserV1Request.Validate if the designated constraints aren't met.
type CreateUserV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV1RequestValidationError) ErrorName() string {
	return "CreateUserV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV1RequestValidationError{}

// Validate checks the field values on CreateUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// CreateUserV1ResponseValidationError is the validation error returned by
// CreateUserV1Response.Validate if the designated constraints aren't met.
type CreateUserV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV1ResponseValidationError) ErrorName() string {
	return "CreateUserV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV1ResponseValidationError{}

// Validate checks the field values on RemoveUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// RemoveUserV1RequestValidationError is the validation error returned by
// RemoveUserV1Request.Validate if the designated constraints aren't met.
type RemoveUserV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserV1RequestValidationError) ErrorName() string {
	return "RemoveUserV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserV1RequestValidationError{}

// Validate checks the field values on RemoveUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Deleted

	return nil
}

// RemoveUserV1ResponseValidationError is the validation error returned by
// RemoveUserV1Response.Validate if the designated constraints aren't met.
type RemoveUserV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserV1ResponseValidationError) ErrorName() string {
	return "RemoveUserV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserV1ResponseValidationError{}

// Validate checks the field values on DescribeUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeUserV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// DescribeUserV1RequestValidationError is the validation error returned by
// DescribeUserV1Request.Validate if the designated constraints aren't met.
type DescribeUserV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeUserV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeUserV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeUserV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeUserV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeUserV1RequestValidationError) ErrorName() string {
	return "DescribeUserV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeUserV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeUserV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeUserV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeUserV1RequestValidationError{}

// Validate checks the field values on DescribeUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeUserV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeUserV1ResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeUserV1ResponseValidationError is the validation error returned by
// DescribeUserV1Response.Validate if the designated constraints aren't met.
type DescribeUserV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeUserV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeUserV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeUserV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeUserV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeUserV1ResponseValidationError) ErrorName() string {
	return "DescribeUserV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeUserV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeUserV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeUserV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeUserV1ResponseValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Patronymic

	// no validation rules for Email

	return nil
}

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CalendarId

	// no validation rules for ResumeId

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
